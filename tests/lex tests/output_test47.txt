1	1	keyword	typedef	typedef
1	9	keyword	struct	struct
1	16	identifier	NodeT	NodeT
1	22	separator	{	{
2	5	identifier	LSQ_KeyT	LSQ_KeyT
2	14	identifier	key	key
2	17	separator	;	;
3	5	identifier	LSQ_BaseTypeT	LSQ_BaseTypeT
3	19	identifier	value	value
3	24	separator	;	;
4	5	keyword	struct	struct
4	12	identifier	NodeT	NodeT
4	18	operation	*	*
4	19	identifier	next	next
4	23	separator	;	;
5	1	separator	}	}
5	3	identifier	NodeT	NodeT
5	8	separator	;	;
7	1	keyword	typedef	typedef
7	9	keyword	struct	struct
7	16	separator	{	{
8	5	identifier	LSQ_SizeT	LSQ_SizeT
8	15	identifier	size	size
8	19	separator	;	;
9	5	identifier	NodeT	NodeT
9	11	operation	*	*
9	12	operation	*	*
9	13	identifier	array	array
9	18	separator	;	;
10	5	identifier	LSQ_Callback_CloneFuncT	LSQ_Callback_CloneFuncT
10	29	operation	*	*
10	30	identifier	keyClone	keyClone
10	38	separator	;	;
11	5	identifier	LSQ_Callback_SizeFuncT	LSQ_Callback_SizeFuncT
11	28	operation	*	*
11	29	identifier	keySize	keySize
11	36	separator	;	;
12	5	identifier	LSQ_Callback_CompareFuncT	LSQ_Callback_CompareFuncT
12	31	operation	*	*
12	32	identifier	keyComp	keyComp
12	39	separator	;	;
13	5	identifier	LSQ_Callback_CloneFuncT	LSQ_Callback_CloneFuncT
13	29	operation	*	*
13	30	identifier	valClone	valClone
13	38	separator	;	;
14	1	separator	}	}
14	3	identifier	HashT	HashT
14	8	separator	;	;
16	1	keyword	typedef	typedef
16	9	keyword	struct	struct
16	16	identifier	IteratorT	IteratorT
16	25	separator	{	{
17	5	keyword	int	int
17	9	identifier	flag	flag
17	13	separator	;	;
18	5	identifier	HashT	HashT
18	11	operation	*	*
18	12	identifier	hash	hash
18	16	separator	;	;
19	5	keyword	int	int
19	9	identifier	arrayIndex	arrayIndex
19	19	separator	;	;
20	5	identifier	NodeT	NodeT
20	11	operation	*	*
20	12	identifier	node	node
20	16	separator	;	;
21	1	separator	}	}
21	3	identifier	IteratorT	IteratorT
21	12	separator	;	;
23	1	identifier	LSQ_IteratorT	LSQ_IteratorT
23	15	identifier	LSQ_GetElementByIndex	LSQ_GetElementByIndex
23	36	separator	(	(
23	37	identifier	LSQ_HandleT	LSQ_HandleT
23	49	identifier	handle	handle
23	55	separator	,	,
23	57	identifier	LSQ_KeyT	LSQ_KeyT
23	66	identifier	key	key
23	69	separator	)	)
23	70	separator	{	{
24	5	keyword	if	if
24	8	separator	(	(
24	9	identifier	handle	handle
24	16	operation	==	==
24	19	identifier	LSQ_HandleInvalid	LSQ_HandleInvalid
24	36	separator	)	)
24	38	keyword	return	return
24	45	identifier	NULL	NULL
24	49	separator	;	;
25	5	identifier	HashT	HashT
25	10	operation	*	*
25	12	identifier	hash	hash
25	17	operation	=	=
25	19	separator	(	(
25	20	identifier	HashT	HashT
25	25	operation	*	*
25	26	separator	)	)
25	27	identifier	handle	handle
25	33	separator	;	;
26	5	keyword	int	int
26	9	identifier	ind	ind
26	13	operation	=	=
26	15	identifier	hashf	hashf
26	20	separator	(	(
26	21	identifier	hash	hash
26	25	separator	,	,
26	27	identifier	key	key
26	30	separator	)	)
26	31	separator	;	;
27	5	identifier	NodeT	NodeT
27	11	operation	*	*
27	12	identifier	node	node
27	16	separator	;	;
28	5	keyword	for	for
28	9	separator	(	(
28	10	identifier	node	node
28	15	operation	=	=
28	17	identifier	hash	hash
28	21	operation	->	->
28	23	identifier	array	array
28	28	separator	[	[
28	29	identifier	ind	ind
28	32	separator	]	]
28	33	separator	;	;
28	35	identifier	node	node
28	40	operation	!=	!=
28	43	identifier	NULL	NULL
28	48	operation	&&	&&
28	51	identifier	hash	hash
28	55	operation	->	->
28	57	identifier	keyComp	keyComp
28	64	separator	(	(
28	65	identifier	node	node
28	69	operation	->	->
28	71	identifier	key	key
28	74	separator	,	,
28	76	identifier	key	key
28	79	separator	)	)
28	80	separator	;	;
28	82	identifier	node	node
28	87	operation	=	=
28	89	identifier	node	node
28	93	operation	->	->
28	95	identifier	next	next
28	99	separator	)	)
28	100	separator	;	;
29	5	keyword	if	if
29	8	separator	(	(
29	9	identifier	node	node
29	14	operation	==	==
29	17	identifier	NULL	NULL
29	21	separator	)	)
29	23	keyword	return	return
29	30	identifier	LSQ_GetPastRearElement	LSQ_GetPastRearElement
29	52	separator	(	(
29	53	identifier	handle	handle
29	59	separator	)	)
29	60	separator	;	;
30	5	keyword	else	else
30	10	keyword	return	return
30	17	identifier	CreateIterator	CreateIterator
30	31	separator	(	(
30	32	identifier	hash	hash
30	36	separator	,	,
30	38	identifier	ind	ind
30	41	separator	,	,
30	43	identifier	node	node
30	47	separator	,	,
30	49	int	0	0
30	50	separator	)	)
30	51	separator	;	;
32	1	separator	}	}
