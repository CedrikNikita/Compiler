1	1	keyword	for	for
1	4	separator	(	(
1	5	identifier	i	i
1	7	operation	=	=
1	9	int	0	0
1	10	separator	;	;
1	12	identifier	i	i
1	14	operation	<=	<=
1	17	identifier	abs	abs
1	20	separator	(	(
1	21	identifier	max_val	max_val
1	28	separator	)	)
1	30	operation	+	+
1	32	identifier	abs	abs
1	35	separator	(	(
1	36	identifier	min_val	min_val
1	43	separator	)	)
1	45	separator	;	;
1	47	identifier	i	i
1	48	operation	++	++
1	50	separator	)	)
1	52	identifier	count	count
1	57	separator	[	[
1	58	identifier	i	i
1	59	separator	]	]
1	61	operation	=	=
1	63	int	0	0
1	64	separator	;	;
2	2	keyword	for	for
2	5	separator	(	(
2	6	identifier	i	i
2	8	operation	=	=
2	10	int	0	0
2	11	separator	;	;
2	13	identifier	i	i
2	15	operation	<	<
2	17	identifier	n	n
2	18	separator	;	;
2	20	identifier	i	i
2	21	operation	++	++
2	23	separator	)	)
2	25	separator	{	{
3	3	identifier	scanf	scanf
3	8	separator	(	(
3	9	char*	"%d"	%d
3	13	separator	,	,
3	15	operation	&	&
3	16	identifier	z	z
3	17	separator	)	)
3	18	separator	;	;
4	3	keyword	if	if
4	5	separator	(	(
4	6	identifier	z	z
4	8	operation	>	>
4	10	identifier	max_val	max_val
4	17	separator	)	)
4	19	identifier	max_val	max_val
4	27	operation	=	=
4	29	identifier	z	z
4	30	separator	;	;
5	3	keyword	if	if
5	5	separator	(	(
5	6	identifier	z	z
5	8	operation	<	<
5	10	identifier	min_val	min_val
5	17	separator	)	)
5	19	identifier	min_val	min_val
5	27	operation	=	=
5	29	identifier	z	z
5	30	separator	;	;
6	3	identifier	count	count
6	8	separator	[	[
6	9	identifier	z	z
6	12	operation	+	+
6	14	identifier	abs	abs
6	17	separator	(	(
6	18	identifier	min_val	min_val
6	25	separator	)	)
6	26	separator	]	]
6	27	operation	++	++
6	29	separator	;	;
7	3	identifier	z	z
7	5	operation	=	=
7	7	int	0	0
7	8	separator	;	;
8	2	separator	}	}
9	2	identifier	freopen	freopen
9	9	separator	(	(
9	10	char*	"output0.txt"	output0.txt
9	23	separator	,	,
9	25	char*	"w"	w
9	28	separator	,	,
9	30	identifier	stdout	stdout
9	36	separator	)	)
9	37	separator	;	;
10	2	keyword	for	for
10	5	separator	(	(
10	6	identifier	i	i
10	8	operation	=	=
10	10	int	0	0
10	11	separator	;	;
10	13	identifier	i	i
10	15	operation	<=	<=
10	18	identifier	abs	abs
10	21	separator	(	(
10	22	identifier	max_val	max_val
10	29	separator	)	)
10	31	operation	+	+
10	33	identifier	abs	abs
10	36	separator	(	(
10	37	identifier	min_val	min_val
10	44	separator	)	)
10	45	separator	;	;
10	47	identifier	i	i
10	48	operation	++	++
10	50	separator	)	)
11	3	keyword	for	for
11	6	separator	(	(
11	7	identifier	k	k
11	9	operation	=	=
11	11	int	0	0
11	12	separator	;	;
11	14	identifier	k	k
11	16	operation	<	<
11	18	identifier	count	count
11	23	separator	[	[
11	24	identifier	i	i
11	25	separator	]	]
11	26	separator	;	;
11	28	identifier	k	k
11	29	operation	++	++
11	31	separator	)	)
11	32	separator	{	{
12	4	identifier	z	z
12	5	operation	++	++
12	7	separator	;	;
